diff --git a/dist/index.js b/dist/index.js
index 9e5f845538afd96f4ca7c122e51855d5e33e0b10..38e6969fe7d64f11501ca1cf6e02a43bd29db975 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -61,7 +61,8 @@ function prepareTools(mode) {
   }
   const anthropicTools2 = [];
   for (const tool of tools) {
-    switch (tool.type) {
+    switch (tool.type)
+    {
       case "function":
         anthropicTools2.push({
           name: tool.name,
@@ -129,6 +130,9 @@ function prepareTools(mode) {
         break;
     }
   }
+  if (anthropicTools2.length > 0) {
+    anthropicTools2[anthropicTools2.length - 1].cache_control = { type: 'ephemeral' };
+  }
   const toolChoice = mode.toolChoice;
   if (toolChoice == null) {
     return {
@@ -191,9 +195,26 @@ function convertToAnthropicMessagesPrompt({
     const cacheControlValue = (_a2 = anthropic2 == null ? void 0 : anthropic2.cacheControl) != null ? _a2 : anthropic2 == null ? void 0 : anthropic2.cache_control;
     return cacheControlValue;
   }
+  let lastUserBlockIndex = blocks.reduce((lastIdx, block, index) =>
+    block.type === "user" ? index : lastIdx, -1
+  );
+  let lastAssistantBlockIndex = blocks.reduce((lastIdx, block, index) =>
+    block.type === "assistant" ? index : lastIdx, -1
+  );
+  if (lastUserBlockIndex > lastAssistantBlockIndex) {
+    // user is last
+    // set assistant to -1
+    lastAssistantBlockIndex = -1;
+  } else if (lastAssistantBlockIndex > lastUserBlockIndex) {
+    // assistant is last
+    // set user to -1
+    lastUserBlockIndex = -1;
+  }
   for (let i = 0; i < blocks.length; i++) {
     const block = blocks[i];
     const isLastBlock = i === blocks.length - 1;
+    const isLastUserBlock = i === lastUserBlockIndex;
+    const isLastAssistantBlock = i === lastAssistantBlockIndex;
     const type = block.type;
     switch (type) {
       case "system": {
@@ -211,14 +232,16 @@ function convertToAnthropicMessagesPrompt({
       }
       case "user": {
         const anthropicContent = [];
-        for (const message of block.messages) {
+        for (let messageIdx = 0; messageIdx < block.messages.length; messageIdx++) {
+          const message = block.messages[messageIdx];
+          const isLastMessageInBlock = messageIdx === block.messages.length - 1;
           const { role, content } = message;
           switch (role) {
             case "user": {
               for (let j = 0; j < content.length; j++) {
                 const part = content[j];
                 const isLastPart = j === content.length - 1;
-                const cacheControl = (_a = getCacheControl(part.providerMetadata)) != null ? _a : isLastPart ? getCacheControl(message.providerMetadata) : void 0;
+                const cacheControl = ((isLastUserBlock && isLastMessageInBlock && isLastPart) ? { type: 'ephemeral' } : (_a = getCacheControl(part.providerMetadata)) != null ? _a : isLastPart ? getCacheControl(message.providerMetadata) : void 0);
                 switch (part.type) {
                   case "text": {
                     anthropicContent.push({
@@ -272,7 +295,7 @@ function convertToAnthropicMessagesPrompt({
               for (let i2 = 0; i2 < content.length; i2++) {
                 const part = content[i2];
                 const isLastPart = i2 === content.length - 1;
-                const cacheControl = (_c = getCacheControl(part.providerMetadata)) != null ? _c : isLastPart ? getCacheControl(message.providerMetadata) : void 0;
+                const cacheControl = ((isLastUserBlock && isLastMessageInBlock && isLastPart) ? { type: 'ephemeral' } : (_c = getCacheControl(part.providerMetadata)) != null ? _c : isLastPart ? getCacheControl(message.providerMetadata) : void 0);
                 const toolResultContent = part.content != null ? part.content.map((part2) => {
                   var _a2;
                   switch (part2.type) {
@@ -322,7 +345,7 @@ function convertToAnthropicMessagesPrompt({
           for (let k = 0; k < content.length; k++) {
             const part = content[k];
             const isLastContentPart = k === content.length - 1;
-            const cacheControl = (_d = getCacheControl(part.providerMetadata)) != null ? _d : isLastContentPart ? getCacheControl(message.providerMetadata) : void 0;
+            const cacheControl = ((isLastAssistantBlock && isLastMessage && isLastContentPart) ? { type: 'ephemeral' } : (_d = getCacheControl(part.providerMetadata)) != null ? _d : isLastContentPart ? getCacheControl(message.providerMetadata) : void 0);
             switch (part.type) {
               case "text": {
                 anthropicContent.push({
diff --git a/dist/index.mjs b/dist/index.mjs
index 2cb7ae5b358178cd771425166b1813e2e971b809..ffdfa27c41fd0ddf5a0e4224a6fe15e63160af1c 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -118,6 +118,9 @@ function prepareTools(mode) {
         break;
     }
   }
+  if (anthropicTools2.length > 0) {
+    anthropicTools2[anthropicTools2.length - 1].cache_control = { type: 'ephemeral' };
+  }
   const toolChoice = mode.toolChoice;
   if (toolChoice == null) {
     return {
@@ -182,9 +185,26 @@ function convertToAnthropicMessagesPrompt({
     const cacheControlValue = (_a2 = anthropic2 == null ? void 0 : anthropic2.cacheControl) != null ? _a2 : anthropic2 == null ? void 0 : anthropic2.cache_control;
     return cacheControlValue;
   }
+  let lastUserBlockIndex = blocks.reduce((lastIdx, block, index) =>
+    block.type === "user" ? index : lastIdx, -1
+  );
+  let lastAssistantBlockIndex = blocks.reduce((lastIdx, block, index) =>
+    block.type === "assistant" ? index : lastIdx, -1
+  );
+  if (lastUserBlockIndex > lastAssistantBlockIndex) {
+    // user is last
+    // set assistant to -1
+    lastAssistantBlockIndex = -1;
+  } else if (lastAssistantBlockIndex > lastUserBlockIndex) {
+    // assistant is last
+    // set user to -1
+    lastUserBlockIndex = -1;
+  }
   for (let i = 0; i < blocks.length; i++) {
     const block = blocks[i];
     const isLastBlock = i === blocks.length - 1;
+    const isLastUserBlock = i === lastUserBlockIndex;
+    const isLastAssistantBlock = i === lastAssistantBlockIndex;
     const type = block.type;
     switch (type) {
       case "system": {
@@ -202,14 +222,16 @@ function convertToAnthropicMessagesPrompt({
       }
       case "user": {
         const anthropicContent = [];
-        for (const message of block.messages) {
+        for (let messageIdx = 0; messageIdx < block.messages.length; messageIdx++) {
+          const message = block.messages[messageIdx];
+          const isLastMessageInBlock = messageIdx === block.messages.length - 1;
           const { role, content } = message;
           switch (role) {
             case "user": {
               for (let j = 0; j < content.length; j++) {
                 const part = content[j];
                 const isLastPart = j === content.length - 1;
-                const cacheControl = (_a = getCacheControl(part.providerMetadata)) != null ? _a : isLastPart ? getCacheControl(message.providerMetadata) : void 0;
+                const cacheControl = ((isLastUserBlock && isLastMessageInBlock && isLastPart) ? { type: 'ephemeral' } : (_a = getCacheControl(part.providerMetadata)) != null ? _a : isLastPart ? getCacheControl(message.providerMetadata) : void 0);
                 switch (part.type) {
                   case "text": {
                     anthropicContent.push({
@@ -263,7 +285,7 @@ function convertToAnthropicMessagesPrompt({
               for (let i2 = 0; i2 < content.length; i2++) {
                 const part = content[i2];
                 const isLastPart = i2 === content.length - 1;
-                const cacheControl = (_c = getCacheControl(part.providerMetadata)) != null ? _c : isLastPart ? getCacheControl(message.providerMetadata) : void 0;
+                const cacheControl = ((isLastUserBlock && isLastMessageInBlock && isLastPart) ? { type: 'ephemeral' } : (_c = getCacheControl(part.providerMetadata)) != null ? _c : isLastPart ? getCacheControl(message.providerMetadata) : void 0);
                 const toolResultContent = part.content != null ? part.content.map((part2) => {
                   var _a2;
                   switch (part2.type) {
@@ -313,7 +335,7 @@ function convertToAnthropicMessagesPrompt({
           for (let k = 0; k < content.length; k++) {
             const part = content[k];
             const isLastContentPart = k === content.length - 1;
-            const cacheControl = (_d = getCacheControl(part.providerMetadata)) != null ? _d : isLastContentPart ? getCacheControl(message.providerMetadata) : void 0;
+            const cacheControl = ((isLastAssistantBlock && isLastMessage && isLastContentPart) ? { type: 'ephemeral' } : (_d = getCacheControl(part.providerMetadata)) != null ? _d : isLastContentPart ? getCacheControl(message.providerMetadata) : void 0);
             switch (part.type) {
               case "text": {
                 anthropicContent.push({
